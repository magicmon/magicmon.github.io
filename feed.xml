<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>magicmon</title>
  <subtitle>magicmon&#39;s blog</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://magicmon.github.io/"/>
  <updated>2017-07-05T01:26:28.000Z</updated>
  <id>https://magicmon.github.io/</id>
  
  <author>
    <name>Taewoo Kang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Iterator Pattern in Swift</title>
    <link href="https://magicmon.github.io/2017/07/05/iterator-Pattern/"/>
    <id>https://magicmon.github.io/2017/07/05/iterator-Pattern/</id>
    <published>2017-07-05T01:24:46.000Z</published>
    <updated>2017-07-05T01:26:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>Iterator패턴이란 무엇인지에 대해서 알아보도록 하겠습니다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Iterator패턴이란 무엇인지에 대해서 알아보도록 하겠습니다.&lt;/p&gt;

    
    </summary>
    
      <category term="RxSwift" scheme="https://magicmon.github.io/categories/RxSwift/"/>
    
    
      <category term="iOS" scheme="https://magicmon.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="https://magicmon.github.io/tags/Swift/"/>
    
      <category term="RxSwift" scheme="https://magicmon.github.io/tags/RxSwift/"/>
    
      <category term="iteratorPattern" scheme="https://magicmon.github.io/tags/iteratorPattern/"/>
    
  </entry>
  
  <entry>
    <title>Observer Pattern in Swift</title>
    <link href="https://magicmon.github.io/2017/07/04/Observer-Pattern/"/>
    <id>https://magicmon.github.io/2017/07/04/Observer-Pattern/</id>
    <published>2017-07-04T04:12:26.000Z</published>
    <updated>2017-07-05T01:24:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>Observer패턴이란 무엇인지에 대해서 알아보도록 하겠습니다.<br>(제가 이해하고 있는 기준이라 혹 잘못된 내용이 있으면 알려주시기 바랍니다.)</p>
<blockquote>
<p><em>옵저버 패턴 설명은 <a href="https://ko.wikipedia.org/wiki/%EC%98%B5%EC%84%9C%EB%B2%84_%ED%8C%A8%ED%84%B4" target="_blank" rel="external">wikipedia</a>를 토대로 작성하였습니다.</em></p>
</blockquote>
<h2 id="Observer-패턴"><a href="#Observer-패턴" class="headerlink" title="Observer 패턴"></a>Observer 패턴</h2><p><a href="https://ko.wikipedia.org/wiki/%EC%98%B5%EC%84%9C%EB%B2%84_%ED%8C%A8%ED%84%B4" target="_blank" rel="external">옵저버 패턴(observer pattern)</a>은 객체의 상태 변화를 관찰하는 관찰자들, 즉 옵저버들의 목록을 객체에 등록하여 상태 변화가 있을 때마다 메서드 등을 통해 객체가 직접 목록의 각 옵저버에게 통지하도록 하는 디자인 패턴이다.</p>
<h4 id="쉽게-예를-들어-설명하도록-해보겠습니다"><a href="#쉽게-예를-들어-설명하도록-해보겠습니다" class="headerlink" title="쉽게 예를 들어 설명하도록 해보겠습니다."></a>쉽게 예를 들어 설명하도록 해보겠습니다.</h4><p>요즘 미세먼지가 심하잖아요? 저도 미세먼지에 민감한 사람중 한명인데요. 그래서 얼만큼 미세먼지 농도가 나오는지 미세먼지를 측정하고 기록하는 모델을 하나 만들었습니다.<br>이 소식을 듣고 저처럼 미세먼지에 민감한 분들이 매 시간마다 와서 미세먼지 농도가 얼마나 되는지 물어봅니다. 처음에는 일일이 알려주다보니 제 시간을 너무 많이 뺏기는거 같고, 제 업무를 할 수가 없을 지경에 이르렀습니다.<br>그리하여 “원하는 데이터 및 특정 상태가 되면 자동으로 알려주겠다”라고 하고 알림 시스템을 만들어 버립니다. 이 소식을 듣고 여러분은 알림을 받기 위해 제 모델에 등록을 합니다.<br>다음 날, 아침에 일어나 보니 미세먼지 농도가 나쁨으로 변경이 됐습니다. 시스템을 이를 감지하고 알림을 등록해준 분들에게 이 상태를 전송하게 됩니다.</p>
<h3 id="구현"><a href="#구현" class="headerlink" title="구현"></a>구현</h3><p>옵저버 패턴의 핵심은 옵저버 또는 리스너(listener)라 불리는 하나 이상의 객체(사용자)가 관찰 대상(미세먼지 측정 시스템)이 되는 객체에 등록시킵니다. 이 관찰 대상의 상태가 변경되면 옵저버들은 이 객체가 발생시키는 이벤트를 받아 각각 행동을 하게 됩니다.</p>
<p>위 예를 토대로 UML 다이어그램으로 표현해보면 아래와 같습니다.</p>
<p><img src="observer_pattern_uml.png" alt=""></p>
<h3 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h3><p>위 다이어그램을 토대로 아래 예제를 구성했습니다.</p>
<p>각 옵저버를 등록 및 해제할 수 있는 protocol 생성<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">protocol Observable &#123;</div><div class="line">    func addObserver(_ observer: Observer)</div><div class="line">    func removeObserver(_ observer: Observer)</div><div class="line">&#125;</div><div class="line"></div><div class="line">protocol Observer: class &#123;</div><div class="line">    func update(_ temp: Float, density: Float)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>옵저버의 등록 및 해제를 실제로 담당하는 클래스 생성<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class Observation: Observable &#123;</div><div class="line">    var observers = [Observer]()</div><div class="line"></div><div class="line">    func addObserver(_ observer: Observer) &#123;</div><div class="line">        observers.append(observer)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    func removeObserver(_ observer: Observer) &#123;</div><div class="line">        observers = observers.filter(&#123; $0 !== observer &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>미세먼지 농도를 측정하여 알림을 보내는 클래스<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class DustMeter: Observation &#123;</div><div class="line">    var temperature: Float = 0.0</div><div class="line">    var density: Float = 0.0</div><div class="line"></div><div class="line">    func notify() &#123;</div><div class="line">        for observer in observers &#123;</div><div class="line">            observer.update(temperature, density: density)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>미세먼지 농도 상태를 알림 받을 수 있는 유저<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class Subscriber: Observer &#123;</div><div class="line"></div><div class="line">    var name: String = &quot;&quot;</div><div class="line"></div><div class="line">    func update(_ temp: Float, density: Float) &#123;</div><div class="line">        print(&quot;name: \(name), temp: \(temp) density: \(density)&quot;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    init(name: String) &#123;</div><div class="line">        self.name = name</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>위의 구성을 토대로 구현한 Controller<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">class ViewController: UIViewController &#123;</div><div class="line">    let dustMeter = DustMeter()</div><div class="line"></div><div class="line">    override func viewDidLoad() &#123;</div><div class="line">        super.viewDidLoad()</div><div class="line"></div><div class="line">        // 관찰자</div><div class="line">        let user1 = Subscriber(name: &quot;Tom&quot;)</div><div class="line">        let user2 = Subscriber(name: &quot;Sam&quot;)</div><div class="line">        let _ = Subscriber(name: &quot;Kim&quot;)</div><div class="line"></div><div class="line">        // 알림을 받을 유저 추가</div><div class="line">        dustMeter.addObserver(user1)</div><div class="line">        dustMeter.addObserver(user2)</div><div class="line"></div><div class="line">        // 알림을 더이상 받지 않을 유저</div><div class="line">        dustMeter.removeObserver(user1)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">extension ViewController &#123;</div><div class="line">    @IBAction func clickedButton() &#123;</div><div class="line">        dustMeter.temperature = 32</div><div class="line">        dustMeter.density = 80</div><div class="line"></div><div class="line"></div><div class="line">        dustMeter.notify()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>결과 값<br><img src="observer_pattern_console.png" alt=""></p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p>위 예제에 대한 소스는 <a href="https://github.com/magicmon/ObserverPatternExample" target="_blank" rel="external">github</a>에서 다운 받으실 수 있습니다.</p>
<h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><p><a href="http://kyejusung.com/2015/09/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-2-observer-pattern/" target="_blank" rel="external">http://kyejusung.com</a><br><a href="http://copynull.tistory.com/140" target="_blank" rel="external">http://copynull.tistory.com/140</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Observer패턴이란 무엇인지에 대해서 알아보도록 하겠습니다.&lt;br&gt;(제가 이해하고 있는 기준이라 혹 잘못된 내용이 있으면 알려주시기 바랍니다.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;옵저버 패턴 설명은 &lt;a href=&quot;https://ko
    
    </summary>
    
      <category term="RxSwift" scheme="https://magicmon.github.io/categories/RxSwift/"/>
    
    
      <category term="iOS" scheme="https://magicmon.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="https://magicmon.github.io/tags/Swift/"/>
    
      <category term="RxSwift" scheme="https://magicmon.github.io/tags/RxSwift/"/>
    
      <category term="observerPattern" scheme="https://magicmon.github.io/tags/observerPattern/"/>
    
  </entry>
  
  <entry>
    <title>RxSwift Introduction</title>
    <link href="https://magicmon.github.io/2017/07/04/RxSwift-Intro/"/>
    <id>https://magicmon.github.io/2017/07/04/RxSwift-Intro/</id>
    <published>2017-07-04T01:12:26.000Z</published>
    <updated>2017-07-05T05:01:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>RxSwift에 대해 하나씩 이해해가면서 정리한 내용입니다.<br>RxSwift가 어떻게 해서 생겨나고, 어떤 흐름을 통해 ReactiveX가 유행이 돼었는지 알아보는 내용으로 구성하였습니다.</p>
<h2 id="Reactive-Extensions"><a href="#Reactive-Extensions" class="headerlink" title="Reactive Extensions"></a>Reactive Extensions</h2><p>RxSwift에 대해서 알아보기 전 왜 이것이 유행이 됐고, 어떤 이유에서 사용해야 하는지 알아볼 필요가 있다고 생각했습니다.<br>MS에서 Reactive Extensions(줄여서 Rx)를 고안하고 만들었단 사실은 알고 있을 겁니다. 하지만 왜? 어떤 이유에서 이것을 고안했을지에 대해서 궁금해졌습니다.<br>인터넷에서 해당 내용에 대해 찾던 중 아래 읽어볼 만한 블로그를 만나게 됐다. 읽고 나보니 깔끔하게 탄생배경에 대해서 설명돼 있었습니다.</p>
<ul>
<li><a href="http://huns.me/development/2051" target="_blank" rel="external">MS는 ReactiveX를 왜 만들었을까? (feat. RxJS)</a></li>
</ul>
<p>블로그 내에 있는 탄생배경을 보면 아래와 같은데</p>
<blockquote>
<p><em>Rx의 탄생 배경이 비동기 프로그래밍 문제를 해결하는데 있다. 비동기 프로그래밍은 어렵다. 비동기 코드가 많아지면 제어의 흐름이 복잡하게 얽혀 코드를 예측하기 어려워진다. 따라서 전통적인 절차적 프로그래밍으로는 이 문제를 풀기가 쉽지 않다.</em></p>
</blockquote>
<p>이는 곧<br>사용자의 요구사항, 더 화려한 UI 인터렉션과 더 빠른 반응 속도를 요구하는 시대에 맞춰 프로그래밍을 하귀 위해 고안돼었다고 할 수 있을 것 같습니다.<br>조금 더 탄생 배경 및 자세한 내용은 위의 블로그를 참고하시면 이해가 되실 수 있을 것 같습니다.</p>
<h2 id="ReactiveX의-디자인-패턴"><a href="#ReactiveX의-디자인-패턴" class="headerlink" title="ReactiveX의 디자인 패턴"></a>ReactiveX의 디자인 패턴</h2><ul>
<li><a href="https://magicmon.github.io/2017/07/04/Observer-Pattern">Observer Design Pattern</a></li>
<li><a href="https://magicmon.github.io/2017/07/05/iterator-Pattern">Iterator Design Pattern</a></li>
</ul>
<blockquote>
<p>ReactiveX is a combination of the best ideas from the Observer pattern, the Iterator pattern, and functional programming</p>
</blockquote>
<p>RxSwift를 접하기 전에 저 두 디자인 패턴에 대한 이해가 필요합니다. 위의 인용문에 써있듯이, 두 패턴을 기반으로 고안됐기 때문에 두 패턴을 이해하고 접근하면 훨씬 쉽게 이해가 되실 겁니다.</p>
<p><a href="http://reactivex.io/intro.html" target="_blank" rel="external">reactivex.io</a>에서는 두 패턴에 대한 설명 및 어떻게 두 패턴을 이용하고 사용하고 있는지에 대해서 나와있으니 읽어보시면 될 것 같습니다.</p>
<h2 id="RxSwift"><a href="#RxSwift" class="headerlink" title="RxSwift"></a>RxSwift</h2><p>Swift에서 반응형 프로그래밍(Reactive Programming)을 하기 위한 라이브러리.</p>
<p><a href="https://github.com/ReactiveX/RxSwift" target="_blank" rel="external">RxSwift</a>는 ReactiveX의 Swift버전입니다. 문법은 동일하고 어떻게 Swift내에서 활용할 수 있는지, 또 사용가능한지에 대해 기술하고 SDK형식으로 배포하고 있습니다.</p>
<ul>
<li>RxSwift</li>
<li>RxCocoa</li>
<li>RxTest<br>등을 Import하여 Rx형태로 프로젝트를 진행 할 수 있습니다.</li>
</ul>
<p>또한 <a href="https://github.com/RxSwiftCommunity" target="_blank" rel="external">RxSwiftCommunity</a>에 가시면</p>
<ul>
<li><a href="https://github.com/RxSwiftCommunity/RxDataSources" target="_blank" rel="external">RxDataSources</a></li>
<li><a href="https://github.com/RxSwiftCommunity/RxSwiftExt" target="_blank" rel="external">RxSwiftExt</a></li>
<li><a href="https://github.com/RxSwiftCommunity/RxViewModel" target="_blank" rel="external">RxViewModel</a></li>
<li><a href="https://github.com/RxSwiftCommunity/RxAlamofire" target="_blank" rel="external">RxAlamofire</a></li>
</ul>
<p>등 Rx관련 프로젝트나 유틸리티를 제작하고 있으므로 함께 참고하면 좋을 듯 합니다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RxSwift에 대해 하나씩 이해해가면서 정리한 내용입니다.&lt;br&gt;RxSwift가 어떻게 해서 생겨나고, 어떤 흐름을 통해 ReactiveX가 유행이 돼었는지 알아보는 내용으로 구성하였습니다.&lt;/p&gt;
&lt;h2 id=&quot;Reactive-Extensio
    
    </summary>
    
      <category term="RxSwift" scheme="https://magicmon.github.io/categories/RxSwift/"/>
    
    
      <category term="iOS" scheme="https://magicmon.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="https://magicmon.github.io/tags/Swift/"/>
    
      <category term="RxSwift" scheme="https://magicmon.github.io/tags/RxSwift/"/>
    
      <category term="ReactiveX" scheme="https://magicmon.github.io/tags/ReactiveX/"/>
    
  </entry>
  
  <entry>
    <title>UICollectionView Custom Animation</title>
    <link href="https://magicmon.github.io/2017/05/25/UICollectionView-Animation/"/>
    <id>https://magicmon.github.io/2017/05/25/UICollectionView-Animation/</id>
    <published>2017-05-25T00:35:23.000Z</published>
    <updated>2017-07-05T01:25:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>Dribbble의 <a href="https://dribbble.com/valeryan" target="_blank" rel="external">Valerya Nasikan</a> UX 디자이너의 프로젝트를 보고 앱으로 구현한 내용에 대한 기술입니다.</p>
<p><a href="https://dribbble.com/shots/3489204-Flower-App" target="_blank" rel="external">https://dribbble.com/shots/3489204-Flower-App</a></p>
<p>UICollectionView의 스크롤 효과를 모두 활용할 수 있고 앱으로 활용하기 좋은 UX인 듯 하여, iOS 앱으로 바로 구현했습니다.</p>
<h3 id="메인화면"><a href="#메인화면" class="headerlink" title="메인화면"></a>메인화면</h3><p><a href="http://raywenderlich.com" target="_blank" rel="external">raywenderlich</a>의 <a href="https://videos.raywenderlich.com/courses/65-custom-collection-view-layout/lessons/1" target="_blank" rel="external">Custom Collection View Layout</a>강좌를 토대로 구현했습니다.</p>
<p>기존 강좌에서는 UICollectionView를 vertical로 스크롤 하는 방식에 대해서 설명하였는데, 이를 horizontal로 변경하여 코드를 작성했습니다.</p>
<p><img src="raywenderlich_vertical.png" alt=""></p>
<p>아래는 스크롤 에니메이션 관련 코드 입니다.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlowerListFlowLayout</span>: <span class="title">UICollectionViewFlowLayout</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutAttributesForElements</span><span class="params">(<span class="keyword">in</span> rect: CGRect)</span></span> -&gt; [<span class="type">UICollectionViewLayoutAttributes</span>]? &#123;</div><div class="line">        <span class="keyword">let</span> attributes = <span class="keyword">super</span>.layoutAttributesForElements(<span class="keyword">in</span>: rect)</div><div class="line">        <span class="keyword">var</span> newAttributes = [<span class="type">UICollectionViewLayoutAttributes</span>]()</div><div class="line"></div><div class="line">        <span class="keyword">for</span> itemAttributes <span class="keyword">in</span> attributes! &#123;</div><div class="line">            <span class="keyword">let</span> newItemAttributes = itemAttributes.copy() <span class="keyword">as</span>! <span class="type">UICollectionViewLayoutAttributes</span></div><div class="line">            changeLayoutAttributes(newItemAttributes)</div><div class="line"></div><div class="line">            newAttributes.append(newItemAttributes)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> newAttributes</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">changeLayoutAttributes</span><span class="params">(<span class="number">_</span> attributes: UICollectionViewLayoutAttributes)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> collectionCenter = collectionView!.frame.size.width / <span class="number">2</span></div><div class="line">        <span class="keyword">let</span> offset = collectionView!.contentOffset.x</div><div class="line">        <span class="keyword">let</span> normalizedCenter = attributes.center.x - offset</div><div class="line"></div><div class="line">        <span class="keyword">let</span> maxDistance = <span class="keyword">self</span>.itemSize.width + <span class="keyword">self</span>.minimumLineSpacing</div><div class="line">        <span class="keyword">let</span> <span class="built_in">distance</span> = <span class="built_in">min</span>(<span class="built_in">abs</span>(collectionCenter - normalizedCenter), maxDistance)</div><div class="line">        <span class="keyword">let</span> ratio = (maxDistance - <span class="built_in">distance</span>)/maxDistance</div><div class="line"></div><div class="line">        <span class="keyword">let</span> alpha = ratio * (<span class="number">1</span> - <span class="keyword">self</span>.standardItemAlpha) + <span class="keyword">self</span>.standardItemAlpha</div><div class="line">        <span class="keyword">let</span> scale = ratio * (<span class="number">1</span> - <span class="keyword">self</span>.standardItemScale) + <span class="keyword">self</span>.standardItemScale</div><div class="line">        attributes.alpha = alpha</div><div class="line">        attributes.transform3D = <span class="type">CATransform3DScale</span>(<span class="type">CATransform3DIdentity</span>, scale, scale, <span class="number">1</span>)</div><div class="line">        attributes.zIndex = <span class="type">Int</span>(alpha * <span class="number">10</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">targetContentOffset</span><span class="params">(forProposedContentOffset proposedContentOffset: CGPoint, withScrollingVelocity velocity: CGPoint)</span></span> -&gt; <span class="type">CGPoint</span> &#123;</div><div class="line">        <span class="keyword">let</span> layoutAttributes = <span class="keyword">self</span>.layoutAttributesForElements(<span class="keyword">in</span>: collectionView!.bounds)</div><div class="line"></div><div class="line">        <span class="keyword">let</span> center = collectionView!.bounds.size.width / <span class="number">2</span></div><div class="line">        <span class="keyword">let</span> proposedContentOffsetCenterOrigin = proposedContentOffset.x + center</div><div class="line"></div><div class="line">        <span class="keyword">let</span> closest = layoutAttributes!.sorted &#123; <span class="built_in">abs</span>($<span class="number">0</span>.center.x - proposedContentOffsetCenterOrigin) &lt; <span class="built_in">abs</span>($<span class="number">1</span>.center.x - proposedContentOffsetCenterOrigin) &#125;.first ?? <span class="type">UICollectionViewLayoutAttributes</span>()</div><div class="line">        <span class="keyword">let</span> targetContentOffset = <span class="type">CGPoint</span>(x: floor(closest.center.x - center), y: proposedContentOffset.y)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> targetContentOffset</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Push-Animation"><a href="#Push-Animation" class="headerlink" title="Push Animation"></a>Push Animation</h3><p>NavigationControllerDelegate를 subclass하여 구현하였습니다.<br>해당 앱은 NavigationController를 기반에 둔 화면 전환이기 때문에, 각각의 화면전환 시 에니메이션 지정이 필요 한 경우 <code>NavigationControllerDelegate</code>를 subClassing하여 Custom한 에니메이션을 지정할 수 있습니다.</p>
<p>Subclassing하기 위한 파일을 생성합니다.<br><img src="navigation_file.png" alt=""></p>
<p>Storyboard로 이동 후 NavigationController에서 Delegate를 설정합니다.<br><img src="navigation_storyboard.png" alt=""></p>
<p>이렇게 Delegate를 지정 후 파일로 이동, 각각 화면 이동 시 지정할 Animation을 지정합니다.<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NavigationControllerDelegate</span> : <span class="title">NSObject</span>, <span class="title">UINavigationControllerDelegate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">navigationController</span><span class="params">(<span class="number">_</span> navigationController: UINavigationController, animationControllerFor operation: UINavigationControllerOperation,</span></span></div><div class="line">                              from fromVC: UIViewController, to toVC: UIViewController) -&gt; <span class="type">UIViewControllerAnimatedTransitioning</span>? &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> operation == .push &#123;</div><div class="line">            <span class="keyword">if</span> fromVC <span class="keyword">is</span> <span class="type">FlowerInfosController</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="type">FlowerCollectionViewDetailPushAnimator</span>()</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="type">FlowerCollectionViewPushAnimator</span>()</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> fromVC <span class="keyword">is</span> <span class="type">FlowerDetailController</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="type">FlowerCollectionViewDetailPopAnimator</span>()</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="type">FlowerCollectionViewPopAnimator</span>()</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="메인화면-gt-리스트화면-에니메이션"><a href="#메인화면-gt-리스트화면-에니메이션" class="headerlink" title="메인화면 &gt; 리스트화면 에니메이션"></a>메인화면 &gt; 리스트화면 에니메이션</h4><p>메인화면에서 리스트화면 진입 시 에니메이션은<br>현재화면의 scale을 키우면서 이동할 화면이 서서히 보이는 효과로 구현돼 있습니다.</p>
<p><img src="main_to_list_animation.gif" alt=""><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">animateTransition</span><span class="params">(using transitionContext: UIViewControllerContextTransitioning)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> fromViewController = transitionContext.viewController(forKey: .from)!</div><div class="line">        <span class="keyword">let</span> toViewController = transitionContext.viewController(forKey: .to)!</div><div class="line"></div><div class="line">        transitionContext.containerView.insertSubview(toViewController.view, aboveSubview: fromViewController.view)</div><div class="line"></div><div class="line">        toViewController.view.alpha = <span class="number">0.0</span></div><div class="line">        <span class="type">UIView</span>.animate(withDuration: <span class="keyword">self</span>.transitionDuration(using: transitionContext), animations: &#123;</div><div class="line">            fromViewController.view.transform = <span class="type">CGAffineTransform</span>(scaleX: <span class="number">1.5</span>, y: <span class="number">1.5</span>)</div><div class="line">            toViewController.view.alpha = <span class="number">1.0</span></div><div class="line">        &#125;) &#123; (finished) <span class="keyword">in</span></div><div class="line">            fromViewController.view.transform = <span class="type">CGAffineTransform</span>(scaleX: <span class="number">1.0</span>, y: <span class="number">1.0</span>)</div><div class="line">            transitionContext.completeTransition(<span class="literal">true</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h4 id="리스트화면-gt-상세화면-에니메이션"><a href="#리스트화면-gt-상세화면-에니메이션" class="headerlink" title="리스트화면 &gt; 상세화면 에니메이션"></a>리스트화면 &gt; 상세화면 에니메이션</h4><p>리스트화면에서 상세화면 진입 시 에니메이션은 세가지 효과가 동시에 표현하도록 돼있습니다.</p>
<ul>
<li>리스트화면에 있는 이미지가 상세화면 상단에 위치</li>
<li>꽃에 대한 설명은 아래에서 위로 올라오는 에니메이션</li>
<li>리스트화면의 배경이 서서히 커지면서 상세화면의 색으로 지정</li>
</ul>
<p>각각 animation을 지정하기 위해 각각 snapshot을 만들고 그 snapshot에 animation을 지정합니다. 그렇게 하면 진입할 화면에 대한 frame을 깨지않으면서 자유로운 에니메이션을 지정할 수 있기 때문에 이런방식을 사용했습니다.</p>
<p><img src="list_to_detail_animation.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">animateTransition</span><span class="params">(using transitionContext: UIViewControllerContextTransitioning)</span></span> &#123;</div><div class="line">  <span class="keyword">let</span> fromViewController = transitionContext.viewController(forKey: .from)!</div><div class="line">  <span class="keyword">let</span> toViewController = transitionContext.viewController(forKey: .to)!</div><div class="line">  <span class="keyword">let</span> sourceVC = fromViewController <span class="keyword">as</span>! <span class="type">FlowerDetailController</span></div><div class="line">  <span class="keyword">let</span> destinationVC = toViewController <span class="keyword">as</span>! <span class="type">FlowerInfosController</span></div><div class="line"></div><div class="line">  transitionContext.containerView.insertSubview(toViewController.view, aboveSubview: fromViewController.view)</div><div class="line"></div><div class="line">  <span class="comment">// to</span></div><div class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> selectedItem = destinationVC.selectedIndexPath, <span class="keyword">let</span> infoCell = destinationVC.collectionView?.cellForItem(at: selectedItem) <span class="keyword">as</span>? <span class="type">FlowerInfosCell</span> <span class="keyword">else</span> &#123;</div><div class="line">      transitionContext.completeTransition(<span class="literal">true</span>)</div><div class="line">      <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">// from</span></div><div class="line"></div><div class="line">  <span class="comment">// background</span></div><div class="line">  <span class="keyword">let</span> snapBackgroundView = <span class="type">UIView</span>(frame: infoCell.contentView.frame)</div><div class="line">  snapBackgroundView.backgroundColor = infoCell.contentView.backgroundColor</div><div class="line">  snapBackgroundView.frame.origin = infoCell.contentView.convert(.zero, to: <span class="literal">nil</span>)</div><div class="line">  transitionContext.containerView.addSubview(snapBackgroundView)</div><div class="line">  <span class="keyword">let</span> defaultScaleX: <span class="type">CGFloat</span> = sourceVC.imageView.width / infoCell.imageView.width</div><div class="line">  <span class="keyword">let</span> defaultScaleY: <span class="type">CGFloat</span> = sourceVC.imageView.height / infoCell.imageView.height</div><div class="line">  snapBackgroundView.transform = <span class="type">CGAffineTransform</span>(scaleX: defaultScaleX * <span class="number">3</span>, y: defaultScaleY * <span class="number">3</span>)</div><div class="line"></div><div class="line">  <span class="comment">// imageView</span></div><div class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> snapImageView = sourceVC.imageView.snapshot <span class="keyword">else</span> &#123;</div><div class="line">      transitionContext.completeTransition(<span class="literal">true</span>)</div><div class="line">      <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line">  snapImageView.frame.origin = sourceVC.imageView.convert(.zero, to: <span class="literal">nil</span>)</div><div class="line">  transitionContext.containerView.addSubview(snapImageView)</div><div class="line"></div><div class="line">  <span class="comment">// description</span></div><div class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> snapDescription = sourceVC.descriptionView.snapshot <span class="keyword">else</span> &#123;</div><div class="line">      transitionContext.completeTransition(<span class="literal">true</span>)</div><div class="line">      <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line">  snapDescription.frame.origin = sourceVC.descriptionView.convert(.zero, to: <span class="literal">nil</span>)</div><div class="line">  transitionContext.containerView.addSubview(snapDescription)</div><div class="line"></div><div class="line">  <span class="comment">// scale</span></div><div class="line">  <span class="keyword">let</span> animationScaleX: <span class="type">CGFloat</span> = infoCell.imageView.frame.size.width / sourceVC.imageView.frame.size.width</div><div class="line">  <span class="keyword">let</span> animationScaleY: <span class="type">CGFloat</span> = infoCell.imageView.frame.size.height / sourceVC.imageView.frame.size.height</div><div class="line"></div><div class="line">  <span class="type">UIView</span>.animate(withDuration: <span class="keyword">self</span>.transitionDuration(using: transitionContext), animations: &#123;</div><div class="line">      snapBackgroundView.transform = <span class="type">CGAffineTransform</span>.identity</div><div class="line"></div><div class="line">      snapImageView.transform = <span class="type">CGAffineTransform</span>(scaleX: animationScaleX, y: animationScaleY)</div><div class="line">      <span class="keyword">let</span> cellImageOrigin: <span class="type">CGPoint</span> = infoCell.imageView.convert(.zero, to: <span class="literal">nil</span>)</div><div class="line">      snapImageView.frame = <span class="type">CGRect</span>(x: cellImageOrigin.x, y: cellImageOrigin.y, width: infoCell.imageView.frame.size.width, height: infoCell.imageView.frame.size.height)</div><div class="line"></div><div class="line">      snapDescription.frame.origin.y += sourceVC.view.height</div><div class="line"></div><div class="line">  &#125;) &#123; (finished) <span class="keyword">in</span></div><div class="line"></div><div class="line">      snapImageView.removeFromSuperview()</div><div class="line">      snapBackgroundView.removeFromSuperview()</div><div class="line">      snapDescription.removeFromSuperview()</div><div class="line"></div><div class="line">      transitionContext.completeTransition(<span class="literal">true</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p>위 예제에 대한 소스는 <a href="https://github.com/magicmon/FlowerCollector" target="_blank" rel="external">github</a>에서 다운 받으실 수 있습니다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Dribbble의 &lt;a href=&quot;https://dribbble.com/valeryan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Valerya Nasikan&lt;/a&gt; UX 디자이너의 프로젝트를 보고 앱으로 구현한 내용에 대한 기술입
    
    </summary>
    
      <category term="iOS" scheme="https://magicmon.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://magicmon.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="https://magicmon.github.io/tags/Swift/"/>
    
      <category term="UICollectionView" scheme="https://magicmon.github.io/tags/UICollectionView/"/>
    
      <category term="UICollectionViewFlowLayout" scheme="https://magicmon.github.io/tags/UICollectionViewFlowLayout/"/>
    
      <category term="UIViewControllerAnimatedTransitioning" scheme="https://magicmon.github.io/tags/UIViewControllerAnimatedTransitioning/"/>
    
  </entry>
  
  <entry>
    <title>Implement APNs with GCM</title>
    <link href="https://magicmon.github.io/2017/05/02/Implement-APNs-with-GCM/"/>
    <id>https://magicmon.github.io/2017/05/02/Implement-APNs-with-GCM/</id>
    <published>2017-05-02T03:02:04.000Z</published>
    <updated>2017-05-25T05:11:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>푸쉬 기능을 모두 GCM으로 사용하고 싶을 경우가 있다.<br>(아마 운영상의 이유로 푸쉬 기능을 모두 GCM으로 보내는 경우인데)<br>구글에서 해당 서비스를 제공하고 있다.<br><a href="https://developers.google.com/cloud-messaging" target="_blank" rel="external">https://developers.google.com/cloud-messaging</a><br>해당 페이지에 접속해 가이드대로 따라하면 오케이</p>
<h2 id="가이드-문서"><a href="#가이드-문서" class="headerlink" title="가이드 문서"></a>가이드 문서</h2><p><a href="http://devlecture.tistory.com/entry/팁05-GCM으로-Android-iOS-둘다-push-notification-을-할-수-있다" target="_blank" rel="external">[팁5] GCM으로 Android, iOS 둘다 push notification 을 할 수 있다.</a></p>
<h3 id="주의"><a href="#주의" class="headerlink" title="주의"></a>주의</h3><p>아래 설정에서 <code>sandbox</code>용도인지 <code>product</code>용도 인지 구분해줘야 배포시 문제가 생기지 않는다</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Start the GGLInstanceID shared instance with that config and request a registration</span></div><div class="line"><span class="comment">// token to enable reception of notifications</span></div><div class="line"></div><div class="line"><span class="type">GGLInstanceID</span>.sharedInstance().startWithConfig(instanceIDConfig)</div><div class="line"></div><div class="line">#<span class="keyword">if</span> <span class="type">DEBUG</span></div><div class="line">registrationOptions = [kGGLInstanceIDRegisterAPNSOption:deviceToken,</div><div class="line">                       kGGLInstanceIDAPNSServerTypeSandboxOption:<span class="literal">true</span>]</div><div class="line">#<span class="keyword">else</span></div><div class="line">registrationOptions = [kGGLInstanceIDRegisterAPNSOption:deviceToken,</div><div class="line">                       kGGLInstanceIDAPNSServerTypeSandboxOption:<span class="literal">false</span>]</div><div class="line">#endif</div></pre></td></tr></table></figure>
<h2 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h2><p>실제 전송 테스트는<br>chrome에서 제공하는 postman을 통해 할 수 있다<br><a href="https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop" target="_blank" rel="external">Postman - REST Client shortcut</a></p>
<p>아래와 같은 양식으로 테스트 진행<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">server</div><div class="line">https://android.googleapis.com/gcm/send</div><div class="line"></div><div class="line">type</div><div class="line">POST</div><div class="line"></div><div class="line">header</div><div class="line">Content-Type      application/json</div><div class="line">Authorization      key=&lt;SERVER_API_KEY&gt;</div></pre></td></tr></table></figure></p>
<p>body<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"to"</span>: <span class="string">"neZCjHSz01I:APA91bEZ7V-H0gxbkvtrQ2q4Rg..."</span>,</div><div class="line">  <span class="attr">"priority"</span>: <span class="string">"high"</span>,</div><div class="line">  <span class="attr">"notification"</span>: &#123;</div><div class="line">    <span class="attr">"title"</span>: <span class="string">"테스트 앱"</span>,</div><div class="line">    <span class="attr">"body"</span>: <span class="string">"데이터 테스트"</span>,</div><div class="line">    <span class="attr">"sound"</span>: <span class="string">"default"</span>,</div><div class="line">    <span class="attr">"custom_data"</span>: &#123;</div><div class="line">      <span class="attr">"key1"</span>: <span class="string">"value1"</span>,</div><div class="line">      <span class="attr">"key2"</span>: <span class="string">"value2"</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"data"</span>: &#123;</div><div class="line">    <span class="attr">"key1"</span>: <span class="string">"value1"</span>,</div><div class="line">    <span class="attr">"key2"</span>: <span class="string">"value2"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="25573F475717566B10E5DA.png" alt=""></p>
<p>응답이 아래와 같은식으로 오면 성공<br>(success가 1로 찍힘)</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"multicast_id"</span>: <span class="number">4641604398078841000</span>,</div><div class="line">  <span class="attr">"success"</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">"failure"</span>: <span class="number">0</span>,</div><div class="line">  <span class="attr">"canonical_ids"</span>: <span class="number">0</span>,</div><div class="line">  <span class="attr">"results"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"message_id"</span>: <span class="string">"0:1461147253377743%5c9c215e5c9c215e"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>로그는 아래와 같이 AppDelegate.swift <code>didReceiveRemoteNotification()</code>에서 확인 가능<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  gcm.message_id: 0:1461149417155575%5c9c215e5c9c215e,</div><div class="line">  key1: value1,</div><div class="line">  gcm.notification.custom_data: &#123;</div><div class="line">    &quot;key1&quot;: &quot;value1&quot;,</div><div class="line">    &quot;key2&quot;: &quot;value2&quot;</div><div class="line">  &#125;,</div><div class="line">  key2: value2,</div><div class="line">  aps: &#123;</div><div class="line">    alert = &#123;</div><div class="line">    body = &quot;\Ub370\Uc774\Ud130 \Ud14c\Uc2a4\Ud2b8&quot;;</div><div class="line">    title = &quot;\Ud14c\Uc2a4\Ud2b8 \Uc571&quot;;</div><div class="line">  &#125;;</div><div class="line">  sound = default;</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;푸쉬 기능을 모두 GCM으로 사용하고 싶을 경우가 있다.&lt;br&gt;(아마 운영상의 이유로 푸쉬 기능을 모두 GCM으로 보내는 경우인데)&lt;br&gt;구글에서 해당 서비스를 제공하고 있다.&lt;br&gt;&lt;a href=&quot;https://developers.google.
    
    </summary>
    
      <category term="iOS" scheme="https://magicmon.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://magicmon.github.io/tags/iOS/"/>
    
      <category term="APNs" scheme="https://magicmon.github.io/tags/APNs/"/>
    
      <category term="GCM" scheme="https://magicmon.github.io/tags/GCM/"/>
    
  </entry>
  
  <entry>
    <title>iOS command build script</title>
    <link href="https://magicmon.github.io/2017/05/02/iOS-command-build-script/"/>
    <id>https://magicmon.github.io/2017/05/02/iOS-command-build-script/</id>
    <published>2017-05-02T01:13:34.000Z</published>
    <updated>2017-05-02T03:02:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>스크립트를 통해 Xcode 프로젝트를 빌드하는 방법에 대해서 설명 드리려고 합니다.</p>
<h2 id="구성"><a href="#구성" class="headerlink" title="구성"></a>구성</h2><p>Xcode상에서 작성된 코드를 가끔 커맨드를 통해 빌드해야 할 경우가 생깁니다.<br>저와 같은 경우는 <a href="https://jenkins.io" target="_blank" rel="external">Jenkins</a>를 통해 자동배포 구성 시 Jenkins에서 자동으로 설정해주는 셋팅값 대신 스크립트로 제가 원하는 환경을 만들고 빌드하기 위해 주로 사용합니다.<br>그 이유는 Jenkins빌드셋팅이 생각보다 쉽지 않을 뿐더러 Xcode버전업 등으로 재 설정이 필요할 경우 일정기간 제대로 동작하지 않는 문제가 발생하기 때문입니다.<br>사실 Xcode7에서 마이너버전 업데이트 이후에 제대로 동작하지 않아 알아보던 중 구성하게 됐습니다.</p>
<p>아래 스크립트 구성 방식은 아래와 같습니다.</p>
<ol>
<li>Xcode빌드</li>
<li>ipa파일 추출</li>
<li><a href="https://fabric.io" target="_blank" rel="external">Fabric</a>을 통해 해당 ipa배포<br>3.1. 배포 시 커밋로그를 기반으로 릴리즈 노트 생성</li>
</ol>
<script src="//gist.github.com/6860b81df193c975c10ac5216f00697e.js"></script>
<blockquote>
<p><em>0000000 &lt; 이런식으로 돼 있는 곳은 해당 서버에 맞는 키를 발급받아 넣어주시면 됩니다.</em></p>
</blockquote>
<h2 id="커멘드-창-내-실행"><a href="#커멘드-창-내-실행" class="headerlink" title="커멘드 창 내 실행"></a>커멘드 창 내 실행</h2><p>커멘드 창에서 실행시는<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./build.sh <span class="string">"Test"</span> <span class="string">"TestTarget"</span> <span class="string">"Testers"</span></div></pre></td></tr></table></figure></p>
<p>이렇게 세개의 파라미터로 동작하고, 각 파라미터는</p>
<ul>
<li>첫번째 파라미터 : workspace 이름</li>
<li>두번째 파라미터 : 빌드하려는 타켓 이름</li>
<li>세번째 파라미터 : fabric 배포 시 배포 그룹 이름</li>
</ul>
<p>입니다.</p>
<blockquote>
<p><em>fabric 배포가 필요 없으시다면 스크립트에서 해당 설정 부분을 제거하시면 될 듯 합니다.</em></p>
</blockquote>
<h2 id="Jekins내-설정"><a href="#Jekins내-설정" class="headerlink" title="Jekins내 설정"></a>Jekins내 설정</h2><p>Jenkins내의 프로젝트 설정으로 가셔서<br>아래쪽에 보시면 Build항목이 있습니다.</p>
<p><code>Add build step</code> &gt; <code>Execute shell</code>을 클릭하여 추가한 후<br>해당 스크립트를 작성해주시면 됩니다.</p>
<p><img src="jenkins_config.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;스크립트를 통해 Xcode 프로젝트를 빌드하는 방법에 대해서 설명 드리려고 합니다.&lt;/p&gt;
&lt;h2 id=&quot;구성&quot;&gt;&lt;a href=&quot;#구성&quot; class=&quot;headerlink&quot; title=&quot;구성&quot;&gt;&lt;/a&gt;구성&lt;/h2&gt;&lt;p&gt;Xcode상에서 작성된 코드를
    
    </summary>
    
      <category term="OSX" scheme="https://magicmon.github.io/categories/OSX/"/>
    
    
      <category term="iOS" scheme="https://magicmon.github.io/tags/iOS/"/>
    
      <category term="Jenkins" scheme="https://magicmon.github.io/tags/Jenkins/"/>
    
      <category term="xcodebuild" scheme="https://magicmon.github.io/tags/xcodebuild/"/>
    
      <category term="buildscript" scheme="https://magicmon.github.io/tags/buildscript/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat+Jenkins+SonaQube for OSX</title>
    <link href="https://magicmon.github.io/2017/04/26/Tomcat-Jenkins-SonaQube/"/>
    <id>https://magicmon.github.io/2017/04/26/Tomcat-Jenkins-SonaQube/</id>
    <published>2017-04-26T07:23:29.000Z</published>
    <updated>2017-06-27T02:01:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>OSX 상에서 SonaQube에 Jeknins를 연동하여 SonaQube 코드품질 측정을 자동으로 하도록 설치하는 과정이다.<br>또한 Tomcat으로 SonarQube를 띄워 서버가 돌아가도록 하는 과정도 포함 하였다.</p>
<p>설치 순서는<br><a href="#mysql">mysql</a> &gt; <a href="#Sonar">SonaQube</a> &gt; <a href="#Jenkins">Jenkins</a>이다.</p>
<h3 id="주의"><a href="#주의" class="headerlink" title="주의"></a>주의</h3><p>각각의 패키지 설치는 <a href="https://brew.sh/index_ko.html" target="_blank" rel="external">Homebrew</a>를 통해 진행하였다.<br>혹시 아직 Homebrew가 설치 돼 있지 않으면, 해당 패키지를 설치 한 후, 아래 설치를 진행한다.</p>
<h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><p>mysql 설치<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> brew install mysql</div><div class="line"><span class="meta">$</span> brew services start mysql</div></pre></td></tr></table></figure></p>
<p>처음 설치 했다면 root 암호 설정<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> mysqladmin -u root -p password root</div></pre></td></tr></table></figure></p>
<p>sonarQube 계정 설정을 위해 sql 실행<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> mysql -u root -p &lt; create_database.sql</div></pre></td></tr></table></figure></p>
<p>파일 &gt; <a href="https://drive.google.com/file/d/0Bw6yvzWgIR6BeHdQRFZLaXQ4akk/view?usp=sharing" target="_blank" rel="external">create_database.sql</a></p>
<h3 id="Sonar"><a href="#Sonar" class="headerlink" title="Sonar"></a>Sonar</h3><p>sonar 설치<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> brew install sonar</div><div class="line"><span class="meta">$</span> brew install sonar-runner</div></pre></td></tr></table></figure></p>
<p>sonar property 설정<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> vi /usr/local/Cellar/sonar/5.6/libexec/conf/sonar.properties</div></pre></td></tr></table></figure></p>
<p>수정부분<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># User credentials.</span></div><div class="line"><span class="comment"># Permissions to create tables, indices and triggers must be granted to JDBC user.</span></div><div class="line"><span class="comment"># The schema must be created first.</span></div><div class="line">sonar.jdbc.username=sonar</div><div class="line">sonar.jdbc.password=sonar</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#----- MySQL 5.6 or greater</span></div><div class="line"><span class="comment"># Only InnoDB storage engine is supported (not myISAM).</span></div><div class="line"><span class="comment"># Only the bundled driver is supported. It can not be changed.</span></div><div class="line">sonar.jdbc.url=<span class="symbol">jdbc:</span><span class="symbol">mysql:</span>/<span class="regexp">/localhost:3306/sonar</span>?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=<span class="literal">true</span>&amp;useConfigs=maxPerformance</div></pre></td></tr></table></figure></p>
<p>sonar 실행<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> brew services start sonar</div></pre></td></tr></table></figure></p>
<h3 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h3><p>Jenkins 설치<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> brew install jenkins</div><div class="line"><span class="meta">$</span> brew services start jenkins</div></pre></td></tr></table></figure></p>
<h2 id="서비스-시작-확인"><a href="#서비스-시작-확인" class="headerlink" title="서비스 시작 확인"></a>서비스 시작 확인</h2><p>mysql, Sonar, Jenkins가 모두 설치 및 서비스가 실행됐는지 확인하기 위해 서비스를 확인<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> brew services list</div></pre></td></tr></table></figure></p>
<p>해당 서비스가 모두 실행중이라면 설치 완료!!<br><img src="273FA8405771F2584525A4.png" alt=""></p>
<p>만약 mysql이 실행이 안됐다면<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mysql.server start</div></pre></td></tr></table></figure></p>
<h2 id="SonarQube-Jenkins-설정"><a href="#SonarQube-Jenkins-설정" class="headerlink" title="SonarQube+Jenkins 설정"></a>SonarQube+Jenkins 설정</h2><p>Jenkins에서 SonarQube를 설정하고 자동 측정하는 방법입니다.</p>
<ol>
<li>Jenkins내 SonarQube plugin 설치<br><img src="1_sonarqube_setting.png" alt=""></li>
<li>SonaQube 설정<br>Jenkins 관리 -&gt; 시스템 설정 -&gt; SonarQube servers -&gt; Enable injection of SonarQube server configuration as build environment variables 체크 -&gt; name 설정<br><img src="2_sonarqube_setting.png" alt=""></li>
<li>SonarQube Scanner 설정<br>Jenkins 관리 -&gt; Global Tool Configuration -&gt; SonarQube Scanner -&gt; Install automatically 체크, 최신버전 선택<br><img src="3_sonarqube_setting.png" alt=""></li>
<li>해당 프로젝트 설정<br>Add build step -&gt; Excute SonarQube Scanner<br>Analysis properties에 프로젝트 정보 기입<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sonar.projectKey=com.magicmon.testapp</div><div class="line">sonar.projectName=testapp</div><div class="line">sonar.projectVersion=1.0.0</div><div class="line">sonar.sources=testapp</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="참고사이트"><a href="#참고사이트" class="headerlink" title="참고사이트"></a>참고사이트</h2><ul>
<li><p>starting and stopping background services with homebrew<br><a href="https://robots.thoughtbot.com/starting-and-stopping-background-services-with-homebrew" target="_blank" rel="external">https://robots.thoughtbot.com/starting-and-stopping-background-services-with-homebrew</a></p>
</li>
<li><p>Install Jenkins<br><a href="http://dolphin.ivyro.net/file/tool_etc/homebrew_jenkins.html" target="_blank" rel="external">http://dolphin.ivyro.net/file/tool_etc/homebrew_jenkins.html</a></p>
</li>
</ul>
<ul>
<li><p>Install SonarQube<br><a href="http://zafercelaloglu.blogspot.kr/2014/07/how-to-setup-sonar-on-mac-part-1.html" target="_blank" rel="external">http://zafercelaloglu.blogspot.kr/2014/07/how-to-setup-sonar-on-mac-part-1.html</a><br>or<br><a href="http://www.sonarqube.org/downloads/" target="_blank" rel="external">http://www.sonarqube.org/downloads/</a></p>
</li>
<li><p>SoarQube Docs<br><a href="http://docs.sonarqube.org/" target="_blank" rel="external">http://docs.sonarqube.org/</a></p>
</li>
<li><p>Install MySql<br><a href="http://blog.joefallon.net/2013/10/install-mysql-on-mac-osx-using-homebrew/" target="_blank" rel="external">http://blog.joefallon.net/2013/10/install-mysql-on-mac-osx-using-homebrew/</a></p>
</li>
<li><p>Get Swift Plugin<br><a href="http://www.sonarsource.com/products/plugins/languages/swift/" target="_blank" rel="external">http://www.sonarsource.com/products/plugins/languages/swift/</a></p>
</li>
</ul>
<h2 id="if-Error"><a href="#if-Error" class="headerlink" title="if Error"></a>if Error</h2><p><a href="http://stackoverflow.com/questions/33843378/sonar-fails-to-connect-to-mysql-on-mac-ei-caption" target="_blank" rel="external">http://stackoverflow.com/questions/33843378/sonar-fails-to-connect-to-mysql-on-mac-ei-caption</a><br><a href="http://stackoverflow.com/questions/28988441/cant-acess-sonarqube-not-a-valid-locale" target="_blank" rel="external">http://stackoverflow.com/questions/28988441/cant-acess-sonarqube-not-a-valid-locale</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OSX 상에서 SonaQube에 Jeknins를 연동하여 SonaQube 코드품질 측정을 자동으로 하도록 설치하는 과정이다.&lt;br&gt;또한 Tomcat으로 SonarQube를 띄워 서버가 돌아가도록 하는 과정도 포함 하였다.&lt;/p&gt;
&lt;p&gt;설치 순서는
    
    </summary>
    
      <category term="OSX" scheme="https://magicmon.github.io/categories/OSX/"/>
    
    
      <category term="Tomcat" scheme="https://magicmon.github.io/tags/Tomcat/"/>
    
      <category term="Jenkins" scheme="https://magicmon.github.io/tags/Jenkins/"/>
    
      <category term="SonaQube" scheme="https://magicmon.github.io/tags/SonaQube/"/>
    
  </entry>
  
</feed>
